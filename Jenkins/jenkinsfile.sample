node{
    cleanWs()
    //pull the code from github
    stage('pull'){
        git(branch: "${params.Branch}", credentialsId: 'Github', url: 'git@github.com:h6y3/allhands.git')
    }
    //do all pretest and deploy specific code such as rake:bump
    stage('build'){
        withCredentials([string(credentialsId: 'dev_database_password', variable: 'pass')]) {
            withCredentials([string(credentialsId: 'rails_master_key', variable: 'master')]) {
                withCredentials([string(credentialsId: 'mail_password', variable: 'mail_password')]) {
                    withEnv(["DATABASE_PASSWORD=${pass}","DB_PASSWORD=${pass}", "RAILS_ENV=production", "SECRET_KEY_BASE=${master}", "REDIS_URL=10.0.16.3", "MAIL_PASS=${mail_password}"]) {
                        //bundle install and rake bump here then do a push before you do anything to push the new version.
                        sh """#!/bin/bash -l
                        bump patch
                        git status
                        git push --set-upstream origin ${params.Branch}
                        mv config/database.yml.sample config/database.yml
                        gcloud auth configure-docker
                        rm -f Gemfile.lock
                        """
                        VERSION = readFile "${env.WORKSPACE}/VERSION"
                        sh """docker build -t gcr.io/meeting-town/meeting-town-dev:1.1.5 --build-arg RED_URL=${REDIS_URL} --build-arg DB_PASSWORD=${pass}  --build-arg R_ENV=${RAILS_ENV} --build-arg SECRET_KEY=${SECRET_KEY_BASE} --build-arg MAIL_PASS=${MAIL_PASS} . """
                    }
                }
            }
        }
        
    }
    
    stage('test'){
        //once tests are up and running they should be performed at this stage before proceeding to the deploy stage.
    }
    
    //create the artifacts to be deployed
    stage('package'){
        sh 'mkdir output'
        sh """tar --exclude='./output' -zcvf ./output/${env.BUILD_NUMBER}-meeting.tgz ."""
        sh 'ls output'
        archiveArtifacts artifacts: 'output/*.tgz'
    }
    
    stage('deploy'){
        //this should just be a push to the registry which will trigger a rebuild.
        withCredentials([file(credentialsId: 'jenkinsSA', variable: 'FILE')]) {
            //considitonal goes here based on input for whether this is dev stage or prod. Dev is the default.
            if(params.Branch == 'master'){
                //add input gate.
                sh """gcloud auth activate-service-account jenkins@meeting-town.iam.gserviceaccount.com --key-file=${FILE}
                gcloud config set project meeting-town
                gcloud config set compute/region us-central1
                gcloud container clusters get-credentials meeting-town --region=us-central1
                docker push gcr.io/meeting-town/meeting-town:${VERSION}
                kubectl apply -f ./kube/complete.yaml || true
                """
            }
            if(params.Branch == 'staging'){
                sh """gcloud auth activate-service-account jenkins@meeting-town.iam.gserviceaccount.com --key-file=${FILE}
                gcloud config set project meeting-town
                gcloud config set compute/region us-central1
                gcloud container clusters get-credentials meeting-town-staging --region=us-central1
                docker push gcr.io/meeting-town/meeting-town-staging:${VERSION}
                kubectl apply -f ./kube/complete.yaml || true
                """
            }
            else{
                sh """gcloud auth activate-service-account jenkins@meeting-town.iam.gserviceaccount.com --key-file=${FILE}
                gcloud config set project meeting-town
                gcloud config set compute/region us-central1
                gcloud container clusters get-credentials meeting-town-dev --region=us-central1
                docker push gcr.io/meeting-town/meeting-town-dev:${VERSION}
                kubectl apply -f ./kube/complete.yaml || true
                """
            }
            
        }
    }
}
